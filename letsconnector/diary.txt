--- Please post new entries at the top of the diary

alisdair 29/08/2004

How to commit:

in letsconnector directory:
$ cvs commit -m "letsconnector-nnnn"
$ cvs rtag letsconnector-nnnn letsconnector
where nnnn is the four digit version number.

alisdair, sekenre 29/08/2004

We've decided to work on the subset of functionality which does not use
personal data. This is because we want the system to be useful as soon as
possible. The planned subset will allow distributed updating and access for
wants and offers.

sekenre 10/08/2004

I'm checking in this version to note that I've put a short project description
in the project summary page and also categorised us in the Trove software map.

I also added www.edinburghlets.org.uk as our homepage. Perhaps I could write a
short summary to the Edinburgh LETS website to link to directly along with an
email address for more information? Let me know what you think.

Hope the text works out, anyway, here's the transcript;

This project is a Local Exchange and Trading System admin tool, accessible
from the web for the use of LETS members. It is composed of an online
directory, accounting and payment system, and an online newsletter.

Development Status: 1 - Planning, 2 - Pre-Alpha
Environment: Web Environment
Intended Audience: End Users/Desktop, Other Audience
License: GNU General Public License (GPL)
Natural Language: English
Operating System: OS Independent, Linux
Programming Language: Python
Topic: Front-Ends, Accounting, Other/Nonlisted Topic

alisdair 11/07/2004

From an email to Kio:

"Having looked at a few CGI frameworks .... I'm inclined to agree with you -- 
what do we need those for? Might nick a few ideas from them though, or even a 
few functions if they're GPL'd.

A lot of them are heavily template based, which I think is the wrong way to 
go. It seems to me that programs should be honest about what they're doing -- 
if they're generating HTML, then that's what the code should say. (Albatross, 
which I'd thought looked to be the furthest forward, even added extra tags to 
its templates, with conditionals and loops!) Hence the approach in my 
create_member.cgi, using helper functions to keep the HTML generation clear. 
I hope to do the same for the processing of the form input.

I considered some kind of class-based structure, with classes such as Form, 
Session etc. This would seem to be dishonest, as it implies statefulness 
which we don't have -- every time a http request generates a CGI call, we get 
a new instance of the interpreter. (It follows from this that such classes 
are inefficient)."
